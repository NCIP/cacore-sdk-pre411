<%@ jet package="gov.nih.nci.codegen.transformer.jet" 
        class="HibernateMappingTransformer"
        skeleton="ParentClassTransformerBase.skeleton" %>
<%UMLAttribute idAttr = TransformerUtils.getClassIdAttr(klass);
String fqcn = TransformerUtils.getFQCN(klass);
UMLClass table = TransformerUtils.getTable(klass);
String emptySpace = TransformerUtils.getEmptySpace(level);
String discriminatorColumnName = TransformerUtils.findDiscriminatingColumnName(klass);
if(level == 0){%>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="<%=TransformerUtils.getFullPackageName(klass)%>">
	<class name="<%=klass.getName()%>" table="<%=table.getName()%>" lazy="true" polymorphism="explicit">
		<cache usage="read-write" />
		<id name="<%=idAttr.getName()%>" type="<%=TransformerUtils.getHibernateDataType(klass,idAttr)%>" column="<%=TransformerUtils.getMappedColumnName(table,fqcn+"."+idAttr.getName())%>">
			<generator class="assigned" />
		</id><%
		if(discriminatorColumnName!=null && !discriminatorColumnName.equals("")){%>
		<%=emptySpace%><discriminator column="<%=discriminatorColumnName%>" type="string"/><%
		}
}
		UMLClass currentKlass = klass;
		//do{
			if(currentKlass.getAttributes().size()>0){%>
		<%=emptySpace%><!-- Attributes mapping for the <%=currentKlass.getName()%> class --><%
				for(UMLAttribute attr:currentKlass.getAttributes()){
					if(attr != idAttr){
						if(TransformerUtils.isCollection(currentKlass, attr)){
							UMLClass collectionTable = TransformerUtils.findCollectionTable(attr, model);
							String keyColumnName = TransformerUtils.getCollectionKeyColumnName(collectionTable, currentKlass, attr);
							String elementColumnName = TransformerUtils.getCollectionElementColumnName(collectionTable, currentKlass, attr);
							String elementType = TransformerUtils.getCollectionElementHibernateType(currentKlass, attr);%>
		<%=emptySpace%><set name="<%=attr.getName()%>" lazy="false" table="<%=collectionTable.getName()%>">
			<%=emptySpace%><cache usage="read-write" />
			<%=emptySpace%><key column="<%=keyColumnName%>" />
			<%=emptySpace%><element type="<%=elementType%>" column="<%=elementColumnName%>" />
		<%=emptySpace%></set>
						<%}
						else{%>
		<%=emptySpace%><property name="<%=attr.getName()%>" type="<%=TransformerUtils.getHibernateDataType(currentKlass,attr)%>" column="<%=TransformerUtils.getMappedColumnName(table,fqcn+"."+attr.getName())%>"/><%
						}
					}
				}
			}
			if(currentKlass.getAssociations().size()>0){%>
		<%=emptySpace%><!-- Associations mapping for the <%=klass.getName()%> class --><%
				for(UMLAssociation association:currentKlass.getAssociations()){
					List<UMLAssociationEnd> assocEnds = association.getAssociationEnds();
					UMLAssociationEnd thisEnd = TransformerUtils.getThisEnd(currentKlass,assocEnds);
					UMLAssociationEnd otherEnd = TransformerUtils.getOtherEnd(currentKlass,assocEnds);
					boolean lazy = TransformerUtils.isLazyLoad(klass, association);
					
					if(otherEnd.isNavigable())
					{
						UMLClass assocKlass = (UMLClass)otherEnd.getUMLElement();
						String assocKlassName = TransformerUtils.getFQCN(assocKlass);
						if(TransformerUtils.isMany2Many(thisEnd,otherEnd))
						{
							String lazyValue = lazy == true ? "true" : "false";
							UMLClass correlationTable = TransformerUtils.findCorrelationTable(association, model, assocKlass);
							String keyColumnName = TransformerUtils.findAssociatedColumn(correlationTable,assocKlass,thisEnd, currentKlass,otherEnd, true);
							String assocColumnName = TransformerUtils.findAssociatedColumn(correlationTable,currentKlass,otherEnd, assocKlass, thisEnd, true);
							String inverseColumnName =  TransformerUtils.findInverseColumnValue(correlationTable,assocKlass,thisEnd);
							if(!"".equals(inverseColumnName) && !assocColumnName.equals(inverseColumnName))
								throw new GenerationException("Different columns used for implements-association and inverse-of of the same association");
							String inverseValue = assocColumnName.equals(inverseColumnName) ?"true":"false";
							String joinTableName = correlationTable.getName();%>
		<%=emptySpace%><set name="<%=otherEnd.getRoleName()%>" table="<%=joinTableName%>" lazy="<%=lazyValue%>" inverse="<%=inverseValue%>">
			<%=emptySpace%><cache usage="read-write" />
			<%=emptySpace%><key column="<%=keyColumnName%>" />
			<%=emptySpace%><many-to-many class="<%=assocKlassName%>" column="<%=assocColumnName%>" />
		<%=emptySpace%></set><%
						}else if(TransformerUtils.isOne2Many(thisEnd,otherEnd)){	//One to Many
							String lazyValue = lazy == true ? "true" : "false";
							UMLClass correlationTable = TransformerUtils.findCorrelationTable(association, model, assocKlass, false);
							if (correlationTable == null) //One to Many - No Join Table
							{
								UMLClass assocTable = TransformerUtils.getTable(assocKlass);
								String keyColumnName = TransformerUtils.findAssociatedColumn(assocTable,assocKlass,thisEnd, currentKlass, otherEnd, false);%>
		<%=emptySpace%><set name="<%=otherEnd.getRoleName()%>" lazy="<%=lazyValue%>">
			<%=emptySpace%><cache usage="read-write" />
			<%=emptySpace%><key column="<%=keyColumnName%>" />
			<%=emptySpace%><one-to-many class="<%=assocKlassName%>"/>
		<%=emptySpace%></set><%
							}else{ //One to Many - Join Table
								String keyColumnName = TransformerUtils.findAssociatedColumn(correlationTable,assocKlass,thisEnd, currentKlass, otherEnd, true);
								String assocColumnName = TransformerUtils.findAssociatedColumn(correlationTable,currentKlass,otherEnd,assocKlass,thisEnd, true);
								String inverseColumnName =  TransformerUtils.findInverseColumnValue(correlationTable,assocKlass,thisEnd);
								if(!"".equals(inverseColumnName) && !assocColumnName.equals(inverseColumnName))
									throw new GenerationException("Different columns used for implements-association and inverse-of of the same association");
								String inverseValue = assocColumnName.equals(inverseColumnName) ?"true":"false";
								String joinTableName = correlationTable.getName();%>
		<%=emptySpace%><set name="<%=otherEnd.getRoleName()%>" table="<%=joinTableName%>" lazy="<%=lazyValue%>">
			<%=emptySpace%><cache usage="read-write" />
			<%=emptySpace%><key column="<%=keyColumnName%>" />
			<%=emptySpace%><many-to-many class="<%=assocKlassName%>" column="<%=assocColumnName%>" unique="true"/>
		<%=emptySpace%></set><%
							}
						}else if(TransformerUtils.isMany2One(thisEnd,otherEnd)){
							UMLClass correlationTable = TransformerUtils.findCorrelationTable(association, model, assocKlass, false);
							if (correlationTable == null) //Many to One - No Join Table
							{
								String lazyValue = lazy == true ? "proxy" : "false";							
								String keyColumnName = TransformerUtils.findAssociatedColumn(table,currentKlass,otherEnd,assocKlass,thisEnd, false);%>
		<%=emptySpace%><many-to-one name="<%=otherEnd.getRoleName()%>" class="<%=assocKlassName%>" column="<%=keyColumnName%>" lazy="<%=lazyValue%>" /><%
							}else{ // Many to One - Join Table
								String lazyValue = lazy == true ? "true" : "false";
								String keyColumnName = TransformerUtils.findAssociatedColumn(correlationTable,assocKlass,thisEnd, currentKlass, otherEnd, true);
								String assocColumnName = TransformerUtils.findAssociatedColumn(correlationTable,currentKlass,otherEnd,assocKlass,thisEnd, true);
								String inverseColumnName =  TransformerUtils.findInverseColumnValue(correlationTable,assocKlass,thisEnd);
								if(!"".equals(inverseColumnName) && !assocColumnName.equals(inverseColumnName))
									throw new GenerationException("Different columns used for implements-association and inverse-of of the same association");
								String inverseValue = assocColumnName.equals(inverseColumnName) ?"true":"false";
								String joinTableName = correlationTable.getName();%>
		<%=emptySpace%><join table="<%=joinTableName%>" inverse="<%=inverseValue%>" optional="true">
			<%=emptySpace%><key column="<%=keyColumnName%>" />
			<%=emptySpace%><many-to-one name="<%=otherEnd.getRoleName()%>" column="<%=assocColumnName%>" not-null="true"/>
		<%=emptySpace%></join><%
							}
						}else{	//One to One
							String lazyValue = lazy == true ? "proxy" : "false";

							UMLClass correlationTable = TransformerUtils.findCorrelationTable(association, model, assocKlass, false);
							if (correlationTable == null) //Many to One - No Join Table
							{

								String keyColumnName = TransformerUtils.findAssociatedColumn(table,currentKlass,otherEnd,assocKlass,thisEnd, false, false);
								Boolean keyColumnPresent = (keyColumnName!=null && !"".equals(keyColumnName));
								if(thisEnd.isNavigable())
								{
									if(keyColumnPresent){%>
		<%=emptySpace%><many-to-one name="<%=otherEnd.getRoleName()%>" class="<%=assocKlassName%>" column="<%=keyColumnName%>" unique="true" lazy="<%=lazyValue%>" /><%
									}else{%>
		<%=emptySpace%><one-to-one name="<%=otherEnd.getRoleName()%>" class="<%=assocKlassName%>" property-ref="<%=thisEnd.getRoleName()%>" /><%
									}
								}else{
									if(keyColumnPresent){%>
		<%=emptySpace%><many-to-one name="<%=otherEnd.getRoleName()%>" class="<%=assocKlassName%>" column="<%=keyColumnName%>" unique="true" lazy="<%=lazyValue%>" /><%
									}else {
									    throw new GenerationException("One to one unidirectional mapping requires key column to be present in the source class"+TransformerUtils.getFQCN(currentKlass));
									}
								}
							}else{
								String keyColumnName = TransformerUtils.findAssociatedColumn(correlationTable,assocKlass,thisEnd, currentKlass, otherEnd, true);
								String assocColumnName = TransformerUtils.findAssociatedColumn(correlationTable,currentKlass,otherEnd,assocKlass,thisEnd, true);
								String inverseColumnName =  TransformerUtils.findInverseColumnValue(correlationTable,assocKlass,thisEnd);
								if(!"".equals(inverseColumnName) && !assocColumnName.equals(inverseColumnName))
									throw new GenerationException("Different columns used for implements-association and inverse-of of the same association");
								String inverseValue = assocColumnName.equals(inverseColumnName) ?"true":"false";
								String joinTableName = correlationTable.getName();%>
		<%=emptySpace%><join table="<%=joinTableName%>" inverse="<%=inverseValue%>" optional="true">
			<%=emptySpace%><key column="<%=keyColumnName%>" />
			<%=emptySpace%><many-to-one name="<%=otherEnd.getRoleName()%>" column="<%=assocColumnName%>" not-null="true" unique="true"/>
		<%=emptySpace%></join><%
							}
						}
					}
				}
			}
			currentKlass = TransformerUtils.getSuperClass(currentKlass);
		//}while(currentKlass!=null && discriminatorColumnName!=null);
		for(UMLGeneralization gen:klass.getGeneralizations()){
			UMLClass subKlass = (UMLClass)gen.getSubtype();
			if(subKlass!=klass){
				if(discriminatorColumnName == null || "".equals(discriminatorColumnName)){
				UMLClass superKlass = (UMLClass)gen.getSupertype();
				UMLClass subTable = TransformerUtils.getTable(subKlass);
				String subFqcn = TransformerUtils.getFQCN(subKlass);
				String keyColumnName = TransformerUtils.getMappedColumnName(subTable,subFqcn+"."+idAttr.getName());%>
		<%=emptySpace%><joined-subclass name="<%=subKlass.getName()%>" table="<%=subTable.getName()%>" lazy="true">
			<%=emptySpace%><key column="<%=keyColumnName%>" /><%=generate(model, subKlass, level+1)%>
		<%=emptySpace%></joined-subclass><%
				}else{
					String discriminatorValue = TransformerUtils.getDiscriminatorValue(subKlass);
					UMLClass subTable = TransformerUtils.getTable(subKlass);
					if(subTable == table){%>
		<%=emptySpace%><subclass name="<%=subKlass.getName()%>" discriminator-value="<%=discriminatorValue%>"><%=generate(model, subKlass, level+1)%>
		<%=emptySpace%></subclass><%
					}else{
						String subFqcn = TransformerUtils.getFQCN(subKlass);
						String keyColumnName = TransformerUtils.getMappedColumnName(subTable,subFqcn+"."+idAttr.getName());%>
		<%=emptySpace%><subclass name="<%=subKlass.getName()%>" discriminator-value="<%=discriminatorValue%>">
			<%=emptySpace%><join table="<%=subTable.getName()%>">
				<%=emptySpace%><key column="<%=keyColumnName%>" /><%=generate(model, subKlass, level+1)%>
			<%=emptySpace%></join>
		<%=emptySpace%></subclass><%
					}
				}
			}
		}%>
<%if(level == 0){%>
	</class>
</hibernate-mapping>
<%}%>