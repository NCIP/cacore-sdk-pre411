<project name="caCORE SDK DB Build" default="setup-db" basedir=".">

	<property name="sdk.home" value=".." />
	<property file="${sdk.home}/local.properties"  />
	<property file="${sdk.home}/conf/deploy.properties" />
	<property file="${sdk.home}/build.properties" prefix="sdk" />
	<property file="build.properties" />

	<!-- specific mapping needed for hbm2ddl tool schema exporter -->
	<property name="hibernate.connection.username" value="${DB_USERNAME}" />
	<property name="hibernate.connection.password" value="${DB_PASSWORD}" />
	<property name="hibernate.connection.url" value="${DB_CONNECTION_URL}" />
	<property name="hibernate.connection.driver_class" value="${DB_DRIVER}" />
	<property name="hibernate.dialect" value="${DB_DIALECT}" />
	<property name="hibernate.connection.show_sql" value="true" />

	<filterset id="db.variables">
		<filter token="DB-URL" value="${DB_CONNECTION_URL}" />
		<filter token="DB-NAME" value="${DB_NAME}" />
		<filter token="DB-USERNAME" value="${DB_USERNAME}" />
		<filter token="DB-PASSWORD" value="${DB_PASSWORD}" />
	</filterset>

	<path id="test.database.classpath">
		<fileset dir="lib">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="../${sdk.system.dir}/lib">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="../${sdk.output.dir}/example/build/jar">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${dbjunit.dir}" />
	</path>

	<target name="init-dbunit">
		<taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="test.database.classpath" />
	</target>

	<target name="db-schemavalidate">
		<taskdef name="schemavalidator" classname="org.hibernate.tool.hbm2ddl.SchemaValidatorTask"
			classpathref="test.database.classpath" />
		<schemavalidator>
			<fileset dir="../${sdk.output.dir}/example/src">
				<include name="**/*.hbm.xml" />
			</fileset>
		</schemavalidator>
	</target>


	<!-- =================================================================== -->
	<!--            Export the data                                          -->
	<!-- =================================================================== -->

	<target name="db-export" depends="init-dbunit" description="Exports the current data in the database">
		<dbunit driver="${DB_DRIVER}" url="${DB_CONNECTION_URL}" userid="${DB_USERNAME}"
			schema="${DB_NAME}" password="${DB_PASSWORD}">
			<export dest="${dbjunit.dir}/db-export.xml" format="xml" />
		</dbunit>
	</target>

	<target name="db-load" depends="init-dbunit" description="Loads the database with sample data">
		<!-- Conditionally change operation based on whether database is mssql -->
		<condition property="operation" value="MSSQL_CLEAN_INSERT" else="CLEAN_INSERT">
			<equals arg1="${database.type}" arg2="sqlserver" />
		</condition>
		<property name="file" value="${dbjunit.dir}/db-export.xml" />
		<dbunit driver="${DB_DRIVER}" supportBatchStatement="false" url="${DB_CONNECTION_URL}"
			userid="${DB_USERNAME}" password="${DB_PASSWORD}">
			<operation type="${operation}" src="${file}" format="xml" />
		</dbunit>
	</target>

	<!-- =================================================================== -->
	<!-- The "db-create" target creates a database based on properties       -->
	<!-- from the database.properties file                                   -->
	<!-- =================================================================== -->
	<target name="db-create" description="create database for ${DB_TYPE}">
		<echo>Creating '${DB_NAME}}' database with: ${DB_TYPE}-create.sql</echo>
		<echo>URL: ${DB_CONNECTION_URL}</echo>
		<copy tofile="${dbjunit.dir}/${DB_TYPE}-create.sql" overwrite="true" filtering="true">
			<fileset file="${dbjunit.dir}/sql/${DB_TYPE}-create.sql" />
			<filterset refid="db.variables" />
		</copy>
		<sql onerror="continue" driver="${DB_DRIVER}" url="${DB_CREATE_URL}" userid="${DB_USERNAME}" password="${DB_PASSWORD}" classpathref="test.database.classpath">
			<fileset dir="${dbjunit.dir}">
				<include name="${DB_TYPE}-create.sql" />
			</fileset>
		</sql>
	</target>

	<!-- =================================================================== -->
	<!-- The "db-prepare" target generates the database schema and creates   -->
	<!-- tables based on the mapping files                                   -->
	<!-- =================================================================== -->
	<target name="db-prepare"  description="creates database tables">
		<taskdef name="schemaexport" classname="org.hibernate.tool.hbm2ddl.SchemaExportTask">
			<classpath>
				<path refid="test.database.classpath" />
			</classpath>
		</taskdef>
		<schemaexport quiet="no" text="no" drop="no" delimiter=";" output="${dbjunit.dir}/create-tables.sql">
			<fileset dir="../${sdk.output.dir}/example/src">
				<include name="**/*.hbm.xml" />
			</fileset>
		</schemaexport>
	</target>

	<target name="db-drop" description="drops database tables">
		<taskdef name="schemaexport" classname="org.hibernate.tool.hbm2ddl.SchemaExportTask">
			<classpath>
				<path refid="test.database.classpath" />
			</classpath>
		</taskdef>
		<schemaexport quiet="no" text="no" drop="yes" delimiter=";" output="${dbjunit.dir}/drop-tables.sql">
			<fileset dir="../${sdk.output.dir}/example/src">
				<include name="**/*.hbm.xml" />
			</fileset>
		</schemaexport>
	</target>

	<!-- =================================================================== -->
	<!--            Setup Database                                           -->
	<!-- =================================================================== -->
	<target name="setup-db" depends="db-export,db-drop,db-create,db-prepare,db-load" description="creates database and populates by calling other tasks" />
</project>